import numpy.ma as np
from pandas._typing import Axes, Axis, Dtype as Dtype, FilePathOrBuffer, Level, Renamer, Column
from pandas.core.generic import NDFrame
from pandas.core.groupby import generic as groupby_generic
from pandas.core.indexes.api import Index
from pandas.core.series import Series
from pandas.io.formats import format as fmt
from pandas.io.formats.style import Styler
from typing import Any, Hashable, IO, Iterable, List, Optional, Sequence, Tuple, Union

class DataFrame(NDFrame):
    def __init__(self, data: Any = ..., index: Optional[Axes[Any]]=..., columns: Optional[Axes[Any]]=..., dtype: Optional[Dtype]=..., copy: bool=...) -> None: ...
    @property
    def axes(self) -> List[Index]: ...
    @property
    def shape(self) -> Tuple[int, int]: ...
    def to_string(self, buf: Optional[FilePathOrBuffer[str]]=..., columns: Optional[Sequence[str]]=..., col_space: Optional[int]=..., header: Union[bool, Sequence[str]]=..., index: bool=..., na_rep: str=..., formatters: Optional[fmt.formatters_type]=..., float_format: Optional[fmt.float_format_type]=..., sparsify: Optional[bool]=..., index_names: bool=..., justify: Optional[str]=..., max_rows: Optional[int]=..., min_rows: Optional[int]=..., max_cols: Optional[int]=..., show_dimensions: bool=..., decimal: str=..., line_width: Optional[int]=..., max_colwidth: Optional[int]=..., encoding: Optional[str]=...) -> Optional[str]: ...
    @property
    def style(self) -> Styler: ...
    def items(self) -> Iterable[Tuple[Optional[Hashable], Series]]: ...
    def iteritems(self) -> Iterable[Tuple[Optional[Hashable], Series]]: ...
    def iterrows(self) -> Iterable[Tuple[Optional[Hashable], Series]]: ...
    def itertuples(self, index: bool = ..., name: str = ...) -> Any: ...
    def __len__(self) -> int: ...
    def dot(self, other: Any) -> Any: ...
    def __matmul__(self, other: Any) -> Any: ...
    def __rmatmul__(self, other: Any) -> Any: ...
    @classmethod
    def from_dict(cls: Any, data: Any, orient: Any = ..., dtype: Any = ..., columns: Any = ...) -> DataFrame: ...
    def to_numpy(self, dtype: Any = ..., copy: Any = ...) -> np.ndarray: ...
    def to_dict(self, orient: str = ..., into: Any = ...) -> Any: ...
    def to_gbq(self, destination_table: Any, project_id: Any = ..., chunksize: Any = ..., reauth: Any = ..., if_exists: Any = ..., auth_local_webserver: Any = ..., table_schema: Any = ..., location: Any = ..., progress_bar: Any = ..., credentials: Any = ...) -> None: ...
    @classmethod
    def from_records(cls: Any, data: Any, index: Any = ..., exclude: Any = ..., columns: Any = ..., coerce_float: Any = ..., nrows: Any = ...) -> DataFrame: ...
    def to_records(self, index: Any = ..., column_dtypes: Any = ..., index_dtypes: Any = ...) -> np.recarray: ...
    def to_stata(self, path: Any, convert_dates: Optional[Any] = ..., write_index: bool = ..., byteorder: Optional[Any] = ..., time_stamp: Optional[Any] = ..., data_label: Optional[Any] = ..., variable_labels: Optional[Any] = ..., version: int = ..., convert_strl: Optional[Any] = ...) -> None: ...
    def to_feather(self, path: Any) -> None: ...
    def to_markdown(self, buf: Optional[IO[str]]=..., mode: Optional[str]=..., **kwargs: Any) -> Optional[str]: ...
    def to_parquet(self, path: Any, engine: Any = ..., compression: Any = ..., index: Any = ..., partition_cols: Any = ..., **kwargs: Any) -> None: ...
    def to_html(self, buf: Optional[Any] = ..., columns: Optional[Any] = ..., col_space: Optional[Any] = ..., header: bool = ..., index: bool = ..., na_rep: str = ..., formatters: Optional[Any] = ..., float_format: Optional[Any] = ..., sparsify: Optional[Any] = ..., index_names: bool = ..., justify: Optional[Any] = ..., max_rows: Optional[Any] = ..., max_cols: Optional[Any] = ..., show_dimensions: bool = ..., decimal: str = ..., bold_rows: bool = ..., classes: Optional[Any] = ..., escape: bool = ..., notebook: bool = ..., border: Optional[Any] = ..., table_id: Optional[Any] = ..., render_links: bool = ..., encoding: Optional[Any] = ...) -> Any: ...
    def info(self, verbose: Any = ..., buf: Any = ..., max_cols: Any = ..., memory_usage: Any = ..., null_counts: Any = ...) -> None: ...
    def memory_usage(self, index: Any = ..., deep: Any = ...) -> Series: ...
    def transpose(self, *args: Any, copy: bool=...) -> DataFrame: ...
    T: Any = ...
    def __getitem__(self, key: Any) -> Any: ...
    def __setitem__(self, key: Any, value: Any) -> Any: ...
    def query(self, expr: Any, inplace: bool = ..., **kwargs: Any) -> Any: ...
    def eval(self, expr: Any, inplace: bool = ..., **kwargs: Any) -> Any: ...
    def select_dtypes(self, include: Any = ..., exclude: Any = ...) -> DataFrame: ...
    def insert(self, loc: Any, column: Any, value: Any, allow_duplicates: Any = ...) -> None: ...
    def assign(self, **kwargs: Any) -> DataFrame: ...
    def lookup(self, row_labels: Any, col_labels: Any) -> np.ndarray: ...
    def align(self, other: Any, join: Any = ..., axis: Any = ..., level: Any = ..., copy: Any = ..., fill_value: Any = ..., method: Any = ..., limit: Any = ..., fill_axis: Any = ..., broadcast_axis: Any = ...) -> DataFrame: ...
    def reindex(self, *args: Any, **kwargs: Any) -> DataFrame: ...
    def drop(self, labels: Optional[Any] = ..., axis: int = ..., index: Optional[Any] = ..., columns: Optional[Any] = ..., level: Optional[Any] = ..., inplace: bool = ..., errors: str = ...) -> Any: ...
    def rename(self, mapper: Optional[Renamer]=..., *, index: Optional[Renamer]=..., columns: Optional[Renamer]=..., axis: Optional[Axis]=..., copy: bool=..., inplace: bool=..., level: Optional[Level]=..., errors: str=...) -> Optional[DataFrame]: ...
    def fillna(self, value: Any = ..., method: Any = ..., axis: Any = ..., inplace: Any = ..., limit: Any = ..., downcast: Any = ...) -> Optional[DataFrame]: ...
    def replace(self, to_replace: Optional[Any] = ..., value: Optional[Any] = ..., inplace: bool = ..., limit: Optional[Any] = ..., regex: bool = ..., method: str = ...) -> Any: ...
    def shift(self, periods: Any = ..., freq: Any = ..., axis: Any = ..., fill_value: Any = ...) -> DataFrame: ...
    def set_index(self, keys: Any, drop: bool = ..., append: bool = ..., inplace: bool = ..., verify_integrity: bool = ...) -> Any: ...
    def reset_index(self, level: Optional[Union[Hashable, Sequence[Hashable]]]=..., drop: bool=..., inplace: bool=..., col_level: Hashable=..., col_fill: Optional[Hashable]=...) -> Optional[DataFrame]: ...
    def isna(self) -> DataFrame: ...
    def isnull(self) -> DataFrame: ...
    def notna(self) -> DataFrame: ...
    def notnull(self) -> DataFrame: ...
    def dropna(self, axis: int = ..., how: str = ..., thresh: Optional[Any] = ..., subset: Optional[Any] = ..., inplace: bool = ...) -> Any: ...
    def drop_duplicates(self, subset: Optional[Union[Hashable, Sequence[Hashable]]]=..., keep: Union[str, bool]=..., inplace: bool=..., ignore_index: bool=...) -> Optional[DataFrame]: ...
    def duplicated(self, subset: Optional[Union[Hashable, Sequence[Hashable]]]=..., keep: Union[str, bool]=...) -> Series: ...
    def sort_values(self, by: Any, axis: int = ..., ascending: bool = ..., inplace: bool = ..., kind: str = ..., na_position: str = ..., ignore_index: bool = ...) -> Any: ...  # type: ignore[override]
    def sort_index(self, axis: Any = ..., level: Any = ..., ascending: Any = ..., inplace: Any = ..., kind: Any = ..., na_position: Any = ..., sort_remaining: Any = ..., ignore_index: bool=...) -> Any: ...
    def nlargest(self, n: Any, columns: Any, keep: Any = ...) -> DataFrame: ...
    def nsmallest(self, n: Any, columns: Any, keep: Any = ...) -> DataFrame: ...
    def swaplevel(self, i: Any = ..., j: Any = ..., axis: Any = ...) -> DataFrame: ...
    def reorder_levels(self, order: Any, axis: Any = ...) -> DataFrame: ...
    def combine(self, other: DataFrame, func: Any, fill_value: Any = ..., overwrite: Any = ...) -> DataFrame: ...
    def combine_first(self, other: DataFrame) -> DataFrame: ...
    def update(self, other: Any, join: Any = ..., overwrite: Any = ..., filter_func: Any = ..., errors: Any = ...) -> None: ...
    def groupby(self, by: Any = ..., axis: Any = ..., level: Any = ..., as_index: bool=..., sort: bool=..., group_keys: bool=..., squeeze: bool=..., observed: bool=...) -> groupby_generic.DataFrameGroupBy: ...
    def pivot(self, index: Any = ..., columns: Any = ..., values: Any = ...) -> DataFrame: ...
    def pivot_table(self, values: Any = ..., index: Any = ..., columns: Any = ..., aggfunc: Any = ..., fill_value: Any = ..., margins: Any = ..., dropna: Any = ..., margins_name: Any = ..., observed: Any = ...) -> DataFrame: ...
    def stack(self, level: int = ..., dropna: bool = ...) -> Any: ...
    def explode(self, column: Union[Column, Tuple[Column, ...]]) -> DataFrame: ...
    def unstack(self, level: int = ..., fill_value: Optional[Any] = ...) -> Any: ...
    def melt(self, id_vars: Any = ..., value_vars: Any = ..., var_name: Any = ..., value_name: Any = ..., col_level: Any = ...) -> DataFrame: ...
    def diff(self, periods: Any = ..., axis: Any = ...) -> DataFrame: ...
    def aggregate(self, func: Any, axis: int = ..., *args: Any, **kwargs: Any) -> Any: ...
    agg: Any = ...
    def transform(self, func: Any, axis: Any = ..., *args: Any, **kwargs: Any) -> DataFrame: ...
    def apply(self, func: Any, axis: int = ..., raw: bool = ..., result_type: Optional[Any] = ..., args: Any = ..., **kwds: Any) -> Any: ...
    def applymap(self, func: Any) -> DataFrame: ...
    def append(self, other: Any, ignore_index: Any = ..., verify_integrity: Any = ..., sort: Any = ...) -> DataFrame: ...
    def join(self, other: Any, on: Any = ..., how: Any = ..., lsuffix: Any = ..., rsuffix: Any = ..., sort: Any = ...) -> DataFrame: ...
    def merge(self, right: Any, how: Any = ..., on: Any = ..., left_on: Any = ..., right_on: Any = ..., left_index: Any = ..., right_index: Any = ..., sort: Any = ..., suffixes: Any = ..., copy: Any = ..., indicator: Any = ..., validate: Any = ...) -> DataFrame: ...
    def round(self, decimals: Any = ..., *args: Any, **kwargs: Any) -> DataFrame: ...
    def corr(self, method: Any = ..., min_periods: Any = ...) -> DataFrame: ...
    def cov(self, min_periods: Any = ...) -> DataFrame: ...
    def corrwith(self, other: Any, axis: Any = ..., drop: Any = ..., method: Any = ...) -> Series: ...
    def count(self, axis: int = ..., level: Optional[Any] = ..., numeric_only: bool = ...) -> Any: ...
    def nunique(self, axis: Any = ..., dropna: Any = ...) -> Series: ...
    def idxmin(self, axis: Any = ..., skipna: Any = ...) -> Series: ...
    def idxmax(self, axis: Any = ..., skipna: Any = ...) -> Series: ...
    def mode(self, axis: Any = ..., numeric_only: Any = ..., dropna: Any = ...) -> DataFrame: ...
    def quantile(self, q: float = ..., axis: int = ..., numeric_only: bool = ..., interpolation: str = ...) -> Any: ...
    def to_timestamp(self, freq: Any = ..., how: Any = ..., axis: Any = ..., copy: Any = ...) -> DataFrame: ...
    def to_period(self, freq: Any = ..., axis: Any = ..., copy: Any = ...) -> DataFrame: ...
    def isin(self, values: Any) -> DataFrame: ...
    plot: Any = ...
    hist: Any = ...
    boxplot: Any = ...
    sparse: Any = ...
